build_config: &build_config
  BUILD_IMAGE_NAME: xnat/node-java-build
  BUILD_IMAGE_TAG: latest
  CACHE_VERSION: v2
  NODE_VERSION: "v10.22.0"
  NVM_VERSION: "0.35.3"
  JAVA_VERSION: "zulu8.48.0.53-ca-jdk8.0.265"
  JDK_ROOT: "https://cdn.azul.com/zulu/bin"

version: 2

jobs:

  build_win_and_linux:

    environment:
      <<: *build_config

    docker:
      - image: ${BUILD_IMAGE_NAME}:${BUILD_IMAGE_TAG}

    working_directory: ~/build

    steps:
      - checkout
      - restore_cache:
          key: cache-${CACHE_VERSION}-win-linux-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Create link to Windows 64-bit JRE
          command: ln -s /opt/java/win-x64/jre build_resources/jre/win-x64
      - run:
          name: Create link to Linux 64-bit JRE
          command: ln -s /opt/java/linux-x64 build_resources/jre/linux-x64
      - run:
          name: Install and build node dependencies
          command: yarn install
      - save_cache:
          key: cache-${CACHE_VERSION}-win-linux-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Build Windows 64-bit executable and installer
          command: |
              export JAVA_HOME="${JAVA_HOME_WIN}"
              yarn dist-win-x64
      - run:
          name: Build Linux 64-bit executable and installer
          command: |
              export JAVA_HOME="${JAVA_HOME_LINUX}"
              yarn dist-linux-x64
      - run:
          name: Copy build artifacts to artifacts folder
          command: |
            [[ ! -d artifacts ]] && { mkdir -p artifacts; }
            find dist -mindepth 1 -maxdepth 1 -type f -print0 | xargs --null -I {} cp {} artifacts
      - run:
          name: Upload artifacts to Bitbucket downloads page when the build is on the master branch
          command: |
            [[ ${CIRCLE_BRANCH} == "master" ]] && {
                echo "Found build on master branch, pushing artifacts to: https://api.bitbucket.org/2.0/repositories/${BB_REPO_SLUG}/${TARGET}/downloads"
                echo ""
                echo "Artifacts:"
                for ARTIFACT in $(find artifacts -type f); do
                    echo " * ${ARTIFACT}"
                done
                http --auth "${BB_REPO_OWNER}:${BB_REPO_TOKEN}" --check-status --form POST "https://api.bitbucket.org/2.0/repositories/${BB_REPO_SLUG}/${TARGET}/downloads" $(for ARTIFACT in $(find artifacts -type f); do echo files@${ARTIFACT}; done)
            } || {
                echo "Build on ${CIRCLE_BRANCH} branch, no artifacts pushed to application downloads page"
            }
      - store_artifacts:
          path: artifacts

  build_mac:

    environment:
      <<: *build_config

    macos:
      xcode: "11.4.1"

    working_directory: ~/build

    steps:
      - run:
          name: Install httpie
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install httpie
      - run:
          name: Install NVM and node
          command: |
            set +e
            http --body https://raw.githubusercontent.com/creationix/nvm/v${NVM_VERSION}/install.sh | bash
            echo "export NVM_DIR=\""'${HOME}'"/.nvm\"" >> ~/.bash_profile
            echo "[ -s \""'${NVM_DIR}'"/nvm.sh\" ] && source \""'${NVM_DIR}'"/nvm.sh\"" >> ~/.bash_profile
            source ${HOME}/.nvm/nvm.sh
            nvm install ${NODE_VERSION}
            nvm alias default ${NODE_VERSION}
            nvm use default
      - checkout
      - restore_cache:
          key: cache-${CACHE_VERSION}-mac-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Copy installed JDK to application folder
          command: |
            [[ ! -f /Applications/XNAT-Desktop-Client.app/Contents/Resources/jre/lib/jli/libjli.dylib ]] && {
              [[ -d /Applications/XNAT-Desktop-Client.app ]] && { rm -rf /Applications/XNAT-Desktop-Client.app; }
              cp -R /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk /Applications/XNAT-Desktop-Client.app
              cp -R /Applications/XNAT-Desktop-Client.app/Contents/Home /Applications/XNAT-Desktop-Client.app/Contents/Resources
            }
      - run:
          name: Download and expand JRE for Mac
          command: |
            [[ -d build_resources/jre/mac ]] && {
                [[ $(find build_resources/jre/mac -mindepth 1 -maxdepth 1 -type d -name bin | wc -l | tr -d ' ') == 0 ||
                   ! -f build_resources/jre/mac/bin/java ||
                   $(build_resources/jre/mac/bin/java -version 2>&1 | grep ${JAVA_TOKEN} | wc -l | tr -d ' ') == 0 ]] && {
                    rm -rf build_resources/jre/mac;
                 }
            }
            [[ ! -d build_resources/jre/mac ]] && {
                [[ -d build_resources/jre/mac ]] && { rm -rf build_resources/jre/mac; }
                JAVA_TARGET="${JAVA_VERSION}-macosx_x64"
                echo "No JRE found, downloading ${JAVA_VERSION}"
                http --download ${JDK_ROOT}/${JAVA_TARGET}.zip
                unzip ${JAVA_TARGET}.zip
                mv ${JAVA_TARGET}/zulu-8.jdk/Contents/Home/jre build_resources/jre/mac
                rm -rf ${JAVA_TARGET}*
                echo "JRE installed, using version: $(build_resources/jre/mac/bin/java -version 2>&1 | grep Server)"
            } || {
                echo "Existing JRE found, using version: $(build_resources/jre/mac/bin/java -version 2>&1 | grep Server)"
            }
            # Last, make sure there are no read-only files! These cause the update process to fail.
            find build_resources/jre/mac -type f -perm +444 ! -perm +222 -exec chmod +w '{}' \;
      - run:
          name: Install and build node dependencies
          command: |
            JAVA_HOME=$(/usr/libexec/java_home)
            yarn install
      - save_cache:
          key: cache-${CACHE_VERSION}-mac-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
            - build_resources/jre/mac
            - /Applications/XNAT-Desktop-Client.app
      - run:
          name: Build Mac executable and installer
          command: |
            JAVA_HOME=$(/usr/libexec/java_home)
            yarn dist-mac
      - run:
          name: Copy build artifacts to artifacts folder
          command: |
            [[ ! -d artifacts ]] && { mkdir -p artifacts; }
            find dist -mindepth 1 -maxdepth 1 -type f | xargs -I {} cp {} artifacts
      - run:
          name: Upload artifacts to Bitbucket downloads page when the build is on the master branch
          command: |
            [[ ${CIRCLE_BRANCH} == "master" ]] && {
                echo "Found build on master branch, pushing artifacts to: https://api.bitbucket.org/2.0/repositories/${BB_REPO_SLUG}/${TARGET}/downloads"
                echo ""
                echo "Artifacts:"
                for ARTIFACT in $(find artifacts -type f); do
                    echo " * ${ARTIFACT}"
                done
                http --auth "${BB_REPO_OWNER}:${BB_REPO_TOKEN}" --check-status --form POST "https://api.bitbucket.org/2.0/repositories/${BB_REPO_SLUG}/${TARGET}/downloads" $(for ARTIFACT in $(find artifacts -type f); do echo files@${ARTIFACT}; done)
            } || {
                echo "Build on ${CIRCLE_BRANCH} branch, no artifacts pushed to application downloads page"
            }
      - store_artifacts:
          path: artifacts

workflows:

  version: 2

  build_all:

    jobs:
      - build_win_and_linux:
          context: dxm
      - build_mac:
          context: dxm
